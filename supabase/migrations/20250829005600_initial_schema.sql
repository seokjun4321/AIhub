-- 1. "profiles" 테이블 생성 (사용자 정보)
CREATE TABLE public.profiles (
  id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  username TEXT UNIQUE,
  full_name TEXT,
  avatar_url TEXT,
  bio TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- 2. "guides" 테이블 생성
CREATE TABLE public.guides (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  category TEXT,
  author TEXT,
  imageurl TEXT,
  content TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 3. "posts" 테이블 생성 (커뮤니티)
CREATE TABLE public.posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT,
  content TEXT,
  author_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 4. "comments" 테이블 생성 (커뮤니티)
CREATE TABLE public.comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content TEXT,
  post_id BIGINT REFERENCES public.posts(id) ON DELETE CASCADE,
  author_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 5. "ai_families" 테이블 생성 (AI 브랜드 정보)
CREATE TABLE public.ai_families (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  provider TEXT,
  logo_url TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 6. "ai_models" 테이블 생성 (개별 AI 모델 정보)
CREATE TABLE public.ai_models (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  family_id BIGINT NOT NULL REFERENCES public.ai_families(id) ON DELETE CASCADE,
  version_name TEXT,
  full_name TEXT NOT NULL,
  short_description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 7. "guides" 테이블에 ai_model_id 컬럼 추가 및 외래 키 설정
ALTER TABLE public.guides
ADD COLUMN ai_model_id BIGINT REFERENCES public.ai_models(id) ON DELETE SET NULL;

-- 8. "use_cases" 테이블 생성 (사용자 상황)
CREATE TABLE public.use_cases (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category TEXT NOT NULL,
  situation TEXT NOT NULL UNIQUE,
  summary TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 9. "recommendations" 테이블 생성 (상황과 AI 모델 연결)
CREATE TABLE public.recommendations (
  use_case_id BIGINT NOT NULL REFERENCES public.use_cases(id) ON DELETE CASCADE,
  ai_model_id BIGINT NOT NULL REFERENCES public.ai_models(id) ON DELETE CASCADE,
  reason TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (use_case_id, ai_model_id)
);


-- RLS 정책 활성화 및 설정
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.guides ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_families ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_models ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.use_cases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.recommendations ENABLE ROW LEVEL SECURITY;

-- SELECT 정책
CREATE POLICY "Public profiles are viewable by everyone" ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Public guides are viewable by everyone." ON public.guides FOR SELECT USING (true);
CREATE POLICY "Public posts are viewable by everyone." ON public.posts FOR SELECT USING (true);
CREATE POLICY "Public comments are viewable by everyone." ON public.comments FOR SELECT USING (true);
CREATE POLICY "Public AI families are viewable by everyone." ON public.ai_families FOR SELECT USING (true);
CREATE POLICY "Public AI models are viewable by everyone." ON public.ai_models FOR SELECT USING (true);
CREATE POLICY "Public use cases are viewable by everyone." ON public.use_cases FOR SELECT USING (true);
CREATE POLICY "Public recommendations are viewable by everyone." ON public.recommendations FOR SELECT USING (true);

-- INSERT/UPDATE/DELETE 정책
CREATE POLICY "Users can insert their own profile" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);
CREATE POLICY "Users can create posts." ON public.posts FOR INSERT WITH CHECK (auth.uid() = author_id);
CREATE POLICY "Users can update their own posts." ON public.posts FOR UPDATE USING (auth.uid() = author_id);
CREATE POLICY "Users can delete their own posts." ON public.posts FOR DELETE USING (auth.uid() = author_id);
CREATE POLICY "Users can create comments." ON public.comments FOR INSERT WITH CHECK (auth.uid() = author_id);
CREATE POLICY "Users can update their own comments." ON public.comments FOR UPDATE USING (auth.uid() = author_id);
CREATE POLICY "Users can delete their own comments." ON public.comments FOR DELETE USING (auth.uid() = author_id);

-- auth.users 에 새 유저 추가 시 profiles 테이블에 자동 추가하는 함수 및 트리거
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, username)
  values (
    new.id,
    new.raw_user_meta_data ->> 'full_name',
    new.raw_user_meta_data ->> 'username'
  );
  return new;
end;
$$;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();